# Data input
test2 <- read.csv("./test2.csv")
# Data Modifiers
test2 <- filter(test2,key=="SE")
test2$date <- as.Date(test2$date,"%m-%d-%Y")
test2$date_d <- as.numeric(difftime(test2$date,test2$date[1],units="days"))
test2$date_w <- as.numeric(difftime(test2$date,test2$date[1],units="week"))
test2$date_h <- as.numeric(difftime(test2$date,test2$date[1],units="hours"))
test2$date_m <- as.numeric(difftime(test2$date,test2$date[1],units="mins"))
test2$date_s <- as.numeric(difftime(test2$date,test2$date[1],units="secs"))
scale_size(range=c(2,12), guide="none") +
scale_x_log10() +
# GGPLOT Configuration
plot0 = test2 %>%
ggplot(aes(x=total_deceased, y=total_confirmed)) +
geom_point(alpha = 0.7, stroke = 0.0) +
theme_fivethirtyeight() +
labs(title = "Infection vs Death",
x = "Total Infection",
y = "Total Deaths",
color = "",
caption = "Source: Google Open Data") +
theme(axis.title = element_text(),
text = element_text(family = "Rubik"),
legend.text=element_text(size=10)) +
stat_summary(fun.data= mean_cl_normal) +
geom_smooth(color='red',method='lm')
summary(lm(test2,formula=total_deceased ~ total_confirmed))
#Save the plot image
ggsave("Infection_vs Death_ScatterPlot.png")
# This file has been auto-generated based on Model Driven Engineering techniques
# as a projects in model-based development at Linnaeus University (2021)
# Authors: Angelica Hjelm Gardner, Jens Jakob Sveding, Omid Golshan Tafti
# Special thanks to: Mirko D' Angelo, Diego Perez Palacin, and Cristian Leoni
# Notice: Below package are required
# in order to install each you can easily uncomment them
#install.packages("gifski")
# Libraries
library(gganimate)
library(ggplot2)
library(dplyr)
library(gapminder)
library(ggthemes)
# Options
options(max.print = 100000)
# Data input
test4 <- read.csv("./test4.csv")
# Data Modifiers
test4$date <- as.Date(test4$date,"%m-%d-%Y")
test4$date_d <- as.numeric(difftime(test4$date,test4$date[1],units="days"))
test4$date_w <- as.numeric(difftime(test4$date,test4$date[1],units="week"))
test4$date_h <- as.numeric(difftime(test4$date,test4$date[1],units="hours"))
test4$date_m <- as.numeric(difftime(test4$date,test4$date[1],units="mins"))
test4$date_s <- as.numeric(difftime(test4$date,test4$date[1],units="secs"))
# GGPLOT Configuration
plot0 = test4 %>%
ggplot(aes(x=new_confirmed, y=new_deceased,color= key,size= total_confirmed)) +
geom_point(alpha = 0.7, stroke = 0.0) +
theme_fivethirtyeight() +scale_x_log10()+
labs(title = "Infection vs Death over Time by Country",
x = "New Cases",
y = "New Deaths",
color = "Country",
caption = "Source: Google Open Data") +
theme(axis.title = element_text(),
text = element_text(family = "Rubik"),
legend.text=element_text(size=10)) +
scale_color_brewer(palette = "Set2")
# GGAnimate Configuration
plot0.animation = plot0 +
transition_time(date_d)+
labs(subtitle = "Date: : {frame_time}") +
shadow_wake(wake_length = 0.1)
#Render and save the animation
animate(plot0.animation, height = 500, width = 800, fps = 30, duration = 20,
end_pause = 60, res = 100, renderer = gifski_renderer("./Infection_vs Death over Time_animatin.gif"))
#anim_save("Infection_vs Death over Time by Country_animatin.gif")
# This file has been auto-generated based on Model Driven Engineering techniques
# as a projects in model-based development at Linnaeus University (2021)
# Authors: Angelica Hjelm Gardner, Jens Jakob Sveding, Omid Golshan Tafti
# Special thanks to: Mirko D' Angelo, Diego Perez Palacin, and Cristian Leoni
# Notice: Below package are required
# in order to install each you can easily uncomment them
#install.packages("gifski")
# Libraries
library(gganimate)
library(ggplot2)
library(dplyr)
library(gapminder)
library(ggthemes)
# Options
options(max.print = 100000)
# Data input
test4 <- read.csv("./test4.csv")
# Data Modifiers
test4$date <- as.Date(test4$date,"%m-%d-%Y")
test4$date_d <- as.numeric(difftime(test4$date,test4$date[1],units="days"))
test4$date_w <- as.numeric(difftime(test4$date,test4$date[1],units="week"))
test4$date_h <- as.numeric(difftime(test4$date,test4$date[1],units="hours"))
test4$date_m <- as.numeric(difftime(test4$date,test4$date[1],units="mins"))
test4$date_s <- as.numeric(difftime(test4$date,test4$date[1],units="secs"))
# GGPLOT Configuration
plot0 = test4 %>%
ggplot(aes(x=new_confirmed, y=new_deceased,color= key,size= total_confirmed)) +
geom_point(alpha = 0.7, stroke = 0.0) +
theme_fivethirtyeight() +scale_x_log10()+
labs(title = "Infection vs Death over Time by Country",
x = "New Cases",
y = "New Deaths",
color = "Country",
caption = "Source: Google Open Data") +
theme(axis.title = element_text(),
text = element_text(family = "Rubik"),
legend.text=element_text(size=10)) +
scale_color_brewer(palette = "Set2")
# GGAnimate Configuration
plot0.animation = plot0 +
transition_time(date)+
labs(subtitle = "Date: {frame_time}") +
shadow_wake(wake_length = 0.1)
#Render and save the animation
animate(plot0.animation, height = 500, width = 800, fps = 30, duration = 20,
end_pause = 60, res = 100, renderer = gifski_renderer("./Infection_vs Death over Time_animatin.gif"))
#anim_save("Infection_vs Death over Time by Country_animatin.gif")
# This file has been auto-generated based on Model Driven Engineering techniques
# as a projects in model-based development at Linnaeus University (2021)
# Authors: Angelica Hjelm Gardner, Jens Jakob Sveding, Omid Golshan Tafti
# Special thanks to: Mirko D' Angelo, Diego Perez Palacin, and Cristian Leoni
# Notice: Below package are required
# in order to install each you can easily uncomment them
#install.packages("gifski")
# Libraries
library(gganimate)
library(ggplot2)
library(dplyr)
library(gapminder)
library(ggthemes)
# Options
options(max.print = 100000)
# Data input
test5 <- read.csv("./test5.csv")
# Data Modifiers
test5$date <- as.Date(test5$date,"%m-%d-%Y")
test5$date_d <- as.numeric(difftime(test5$date,test5$date[1],units="days"))
test5$date_w <- as.numeric(difftime(test5$date,test5$date[1],units="week"))
test5$date_h <- as.numeric(difftime(test5$date,test5$date[1],units="hours"))
test5$date_m <- as.numeric(difftime(test5$date,test5$date[1],units="mins"))
test5$date_s <- as.numeric(difftime(test5$date,test5$date[1],units="secs"))
# GGPLOT Configuration
plot0 = test5 %>%
ggplot(aes(x=total_confirmed, y=total_deceased,color= key,size= new_confirmed)) +
geom_point(alpha = 0.7, stroke = 0.0) +
theme_fivethirtyeight() +scale_x_log10()+
labs(title = "Total Infection vs Total Death over Time",
x = "Total Infection",
y = "Total Deaths",
color = "Country",
caption = "Source: Google Open Data") +
theme(axis.title = element_text(),
text = element_text(family = "Rubik"),
legend.text=element_text(size=10)) +
scale_color_brewer(palette = "Set2")
# GGAnimate Configuration
plot0.animation = plot0 +
transition_time(date)+
labs(subtitle = "Date: {frame_time}") +
shadow_wake(wake_length = 0.1)
#Render and save the animation
animate(plot0.animation, height = 500, width = 800, fps = 30, duration = 20,
end_pause = 60, res = 100, renderer = gifski_renderer("./Infection_vs Death over Time_animatin.gif"))
#anim_save("Total_Infection vs Total Death over Time_animatin.gif")
# This file has been auto-generated based on Model Driven Engineering techniques
# as a projects in model-based development at Linnaeus University (2021)
# Authors: Angelica Hjelm Gardner, Jens Jakob Sveding, Omid Golshan Tafti
# Special thanks to: Mirko D' Angelo, Diego Perez Palacin, and Cristian Leoni
# Notice: Below package are required
# in order to install each you can easily uncomment them
#install.packages("gifski")
# Libraries
library(gganimate)
library(ggplot2)
library(dplyr)
library(gapminder)
library(ggthemes)
# Options
options(max.print = 100000)
# Data input
test4 <- read.csv("./test4.csv")
# Data Modifiers
test4$date <- as.Date(test4$date,"%m-%d-%Y")
test4$date_d <- as.numeric(difftime(test4$date,test4$date[1],units="days"))
test4$date_w <- as.numeric(difftime(test4$date,test4$date[1],units="week"))
test4$date_h <- as.numeric(difftime(test4$date,test4$date[1],units="hours"))
test4$date_m <- as.numeric(difftime(test4$date,test4$date[1],units="mins"))
test4$date_s <- as.numeric(difftime(test4$date,test4$date[1],units="secs"))
# GGPLOT Configuration
plot0 = test4 %>%
ggplot(aes(x=new_confirmed, y=new_deceased,color= key,size= total_confirmed)) +
geom_point(alpha = 0.7, stroke = 0.0) +
theme_fivethirtyeight() +scale_x_log10()+
labs(title = "Infection vs Death over Time by Country",
x = "New Cases",
y = "New Deaths",
color = "Country",
caption = "Source: Google Open Data") +
theme(axis.title = element_text(),
text = element_text(family = "Rubik"),
legend.text=element_text(size=10)) +
scale_color_brewer(palette = "Set2")
# GGAnimate Configuration
plot0.animation = plot0 +
transition_time(date)+
labs(subtitle = "Date: {frame_time}") +
shadow_wake(wake_length = 0.1)
#Render and save the animation
animate(plot0.animation, height = 500, width = 800, fps = 30, duration = 20,
end_pause = 60, res = 100, renderer = gifski_renderer("./Infection_vs Death over Time_b_animatin.gif"))
#anim_save("Infection_vs Death over Time by Country_animatin.gif")
# This file has been auto-generated based on Model Driven Engineering techniques
# as a projects in model-based development at Linnaeus University (2021)
# Authors: Angelica Hjelm Gardner, Jens Jakob Sveding, Omid Golshan Tafti
# Special thanks to: Mirko D' Angelo, Diego Perez Palacin, and Cristian Leoni
# Notice: Below package are required
# in order to install each you can easily uncomment them
#install.packages("gifski")
# Libraries
library(gganimate)
library(ggplot2)
library(dplyr)
library(gapminder)
library(ggthemes)
# Options
options(max.print = 100000)
# Data input
test1 <- read.csv("./test1.csv")
# Data Modifiers
test1$date <- as.Date(test1$date,"%m-%d-%Y")
test1$date_d <- as.numeric(difftime(test1$date,test1$date[1],units="days"))
test1$date_w <- as.numeric(difftime(test1$date,test1$date[1],units="week"))
test1$date_h <- as.numeric(difftime(test1$date,test1$date[1],units="hours"))
test1$date_m <- as.numeric(difftime(test1$date,test1$date[1],units="mins"))
test1$date_s <- as.numeric(difftime(test1$date,test1$date[1],units="secs"))
# GGPLOT Configuration
plot0 = test1 %>%
ggplot(aes(x = date, y = new_confirmed,color= key)) +
geom_line(size = 1.2, alpha = 1.8) +
labs(title = "COVID-19 New Cases in Europe",
subtitle = "Spain, United Kingdm, Italy, Sweden, Netherlands, Germany",
x = "Date",
y = "New Cases"
,color = "Country") +
theme_fivethirtyeight() +
theme(axis.title = element_text())
#Save the plot image
ggsave("COVID-19_New Cases in Europe_LinearPlot.png")
setwd("~/LNU/4DV651/MDSE-Covid-Analysis")
library(ggplot2)
library(dplyr)
library(ggthemes)
start = strptime("2/1/2020", format = "%m/%d/%Y")
target_key = "SE"
#customColors = c("#003f5c", "#374c80", "#7a5195", "#bc5090", "#ef5675", "#ff764a", "#ffa600")
epidemiology <- read.csv("./epidemiology_EU.csv")
epidemiology <- filter(epidemiology,key==target_key)
epidemiology$Day <- as.numeric(difftime(strptime(epidemiology$date, format = "%m/%d/%Y"),start,units="days"))
data <- epidemiology[-c(1:2,5:6,9:10) ]
data %>%
ggplot(aes(x=total_deceased, y=total_confirmed)) +
geom_point(alpha = 0.7, stroke = 0) +
theme_fivethirtyeight() +
labs(title = "Infection vs Death",
x = "Total Infection",
y = "Total Deaths",
color = "Country",
caption = "Source: Google Open Data") +
theme(axis.title = element_text()) +
scale_color_brewer(palette = "Set2")+
stat_summary(fun.data= mean_cl_normal) +
geom_smooth(color='red',method='lm')
regResult <- summary(lm(data,formula=total_deceased ~ total_confirmed))
cat(regResult, file = "myfile.txt")
regResult <- summary(lm(data,formula=total_deceased ~ total_confirmed))
cat(regResult, file = "myfile.txt")
cat(summary(lm(data,formula=total_deceased ~ total_confirmed)), file = "myfile.txt")
sink("lm.txt")
summary(lm(data,formula=total_deceased ~ total_confirmed))
sink()
library(gganimate)
library(ggplot2)
library(dplyr)
library(gapminder)
library(ggthemes)
abc <- read.csv("./epidemiology_EU.csv")
abc$date <- as.Date(abc$date, "%m/%d/%Y")
abc$date_d <- as.numeric(difftime(abc$date,abc$date[1],units="days"))
abc$date_w <- as.numeric(difftime(abc$date,abc$date[1],units="week"))
abc$date_h <- as.numeric(difftime(abc$date,abc$date[1],units="hours"))
abc$date_m <- as.numeric(difftime(abc$date,abc$date[1],units="mins"))
abc$date_s <- as.numeric(difftime(abc$date,abc$date[1],units="secs"))
plot0 = abc %>%
ggplot(aes(x=total_deceased, y=total_deceased,color= total_deceased,size= total_deceased)) +
geom_point(alpha = 0.7, stroke = 0.0) +
theme_fivethirtyeight() +
scale_size(range=c(2,12), guide="none") +
scale_x_log10() +
labs(title = "Infection vs Death",
x = "Total Infection",
y = "Total Infection",
color = "Total Infection",
caption = "Source: Google Open Data") +
theme(axis.title = element_text(),
text = element_text(family = "Rubik"),
legend.text=element_text(size=10)) +
scale_color_brewer(palette = "Set2")+
geom_smooth()
plot0
library(gganimate)
library(ggplot2)
library(dplyr)
library(gapminder)
library(ggthemes)
abc <- read.csv("./epidemiology_EU.csv")
abc$date <- as.Date(abc$date, "%m/%d/%Y")
abc$date_d <- as.numeric(difftime(abc$date,abc$date[1],units="days"))
abc$date_w <- as.numeric(difftime(abc$date,abc$date[1],units="week"))
abc$date_h <- as.numeric(difftime(abc$date,abc$date[1],units="hours"))
abc$date_m <- as.numeric(difftime(abc$date,abc$date[1],units="mins"))
abc$date_s <- as.numeric(difftime(abc$date,abc$date[1],units="secs"))
plot0 = abc %>%
ggplot(aes(x=total_deceased, y=total_deceased,color= total_deceased,size= total_deceased)) +
geom_point(alpha = 0.7, stroke = 0.0) +
theme_fivethirtyeight() +
scale_size(range=c(2,12), guide="none") +
scale_x_log10() +
labs(title = "Infection vs Death",
x = "Total Infection",
y = "Total Infection",
color = "Total Infection",
caption = "Source: Google Open Data") +
theme(axis.title = element_text(),
text = element_text(family = "Rubik"),
legend.text=element_text(size=10)) +
scale_color_brewer(palette = "Set2")+
geom_smooth()
plot0
library(gganimate)
library(ggplot2)
library(dplyr)
library(gapminder)
library(ggthemes)
abc <- read.csv("./epidemiology_EU.csv")
abc$date <- as.Date(abc$date, "%m/%d/%Y")
abc$date_d <- as.numeric(difftime(abc$date,abc$date[1],units="days"))
abc$date_w <- as.numeric(difftime(abc$date,abc$date[1],units="week"))
abc$date_h <- as.numeric(difftime(abc$date,abc$date[1],units="hours"))
abc$date_m <- as.numeric(difftime(abc$date,abc$date[1],units="mins"))
abc$date_s <- as.numeric(difftime(abc$date,abc$date[1],units="secs"))
abc %>%
ggplot(aes(x=total_deceased, y=total_deceased,color= total_deceased,size= total_deceased)) +
geom_point(alpha = 0.7, stroke = 0.0) +
theme_fivethirtyeight() +
scale_size(range=c(2,12), guide="none") +
scale_x_log10() +
labs(title = "Infection vs Death",
x = "Total Infection",
y = "Total Infection",
color = "Total Infection",
caption = "Source: Google Open Data") +
theme(axis.title = element_text(),
text = element_text(family = "Rubik"),
legend.text=element_text(size=10)) +
scale_color_brewer(palette = "Set2")+
geom_smooth()
setwd("~/LNU/4DV651/MDSE-Covid-Analysis/covid19/outputDir")
# This file has been auto-generated based on Model Driven Engineering techniques
# as a projects in model-based development at Linnaeus University (2021)
# Authors: Angelica Hjelm Gardner, Jens Jakob Sveding, Omid Golshan Tafti
# Special thanks to: Mirko D' Angelo, Diego Perez Palacin, and Cristian Leoni
# Notice: Below package are required
# in order to install each you can easily uncomment them
#install.packages("gifski")
# Libraries
library(gganimate)
library(ggplot2)
library(dplyr)
library(gapminder)
library(ggthemes)
# Options
options(max.print = 100000)
# Data input
test2 <- read.csv("./test2.csv")
# Data Modifiers
test2 <- filter(test2,key=="SE")
test2$date <- as.Date(test2$date,"%m-%d-%Y")
test2$date_d <- as.numeric(difftime(test2$date,test2$date[1],units="days"))
test2$date_w <- as.numeric(difftime(test2$date,test2$date[1],units="week"))
test2$date_h <- as.numeric(difftime(test2$date,test2$date[1],units="hours"))
test2$date_m <- as.numeric(difftime(test2$date,test2$date[1],units="mins"))
test2$date_s <- as.numeric(difftime(test2$date,test2$date[1],units="secs"))
# GGPLOT Configuration
plot0 = test2 %>%
ggplot(aes(x=total_deceased, y=total_confirmed)) +
geom_point(alpha = 0.7, stroke = 0.0) +
theme_fivethirtyeight() +
labs(title = "Infection vs Death",
x = "Total Infection",
y = "Total Deaths",
color = "",
caption = "Source: Google Open Data") +
theme(axis.title = element_text(),
text = element_text(family = "Rubik"),
legend.text=element_text(size=10)) +
scale_color_brewer(palette = "Set2")+
stat_summary(fun.data= mean_cl_normal) +
geom_smooth(color='red',method='lm')
sink("test2_linear_regression_result.txt")
summary(test2(test2,formula=total_deceased ~ total_confirmed))
sink()
#Save the plot image
ggsave("Infection_vs Death_ScatterPlot.png")
# This file has been auto-generated based on Model Driven Engineering techniques
# as a projects in model-based development at Linnaeus University (2021)
# Authors: Angelica Hjelm Gardner, Jens Jakob Sveding, Omid Golshan Tafti
# Special thanks to: Mirko D' Angelo, Diego Perez Palacin, and Cristian Leoni
# Notice: Below package are required
# in order to install each you can easily uncomment them
#install.packages("gifski")
# Libraries
library(gganimate)
library(ggplot2)
library(dplyr)
library(gapminder)
library(ggthemes)
# Options
options(max.print = 100000)
# Data input
test2 <- read.csv("./test2.csv")
# Data Modifiers
test2 <- filter(test2,key=="SE")
test2$date <- as.Date(test2$date,"%m-%d-%Y")
test2$date_d <- as.numeric(difftime(test2$date,test2$date[1],units="days"))
test2$date_w <- as.numeric(difftime(test2$date,test2$date[1],units="week"))
test2$date_h <- as.numeric(difftime(test2$date,test2$date[1],units="hours"))
test2$date_m <- as.numeric(difftime(test2$date,test2$date[1],units="mins"))
test2$date_s <- as.numeric(difftime(test2$date,test2$date[1],units="secs"))
# GGPLOT Configuration
plot0 = test2 %>%
ggplot(aes(x=total_deceased, y=total_confirmed)) +
geom_point(alpha = 0.7, stroke = 0.0) +
theme_fivethirtyeight() +
labs(title = "Infection vs Death",
x = "Total Infection",
y = "Total Deaths",
color = "",
caption = "Source: Google Open Data") +
theme(axis.title = element_text(),
text = element_text(family = "Rubik"),
legend.text=element_text(size=10)) +
scale_color_brewer(palette = "Set2")+
stat_summary(fun.data= mean_cl_normal) +
geom_smooth(color='red',method='lm')
sink("test2_linear_regression_result.txt")
summary(lm(test2,formula=total_deceased ~ total_confirmed))
sink()
#Save the plot image
ggsave("Infection_vs Death_ScatterPlot.png")
# This file has been auto-generated based on Model Driven Engineering techniques
# as a projects in model-based development at Linnaeus University (2021)
# Authors: Angelica Hjelm Gardner, Jens Jakob Sveding, Omid Golshan Tafti
# Special thanks to: Mirko D' Angelo, Diego Perez Palacin, and Cristian Leoni
# Notice: Below package are required
# in order to install each you can easily uncomment them
#install.packages("gifski")
# Libraries
library(gganimate)
library(ggplot2)
library(dplyr)
library(gapminder)
library(ggthemes)
# Options
options(max.print = 100000)
# Data input
test2 <- read.csv("./test2.csv")
# Data Modifiers
test2 <- filter(test2,key=="SE")
test2$date <- as.Date(test2$date,"%m-%d-%Y")
test2$date_d <- as.numeric(difftime(test2$date,test2$date[1],units="days"))
test2$date_w <- as.numeric(difftime(test2$date,test2$date[1],units="week"))
test2$date_h <- as.numeric(difftime(test2$date,test2$date[1],units="hours"))
test2$date_m <- as.numeric(difftime(test2$date,test2$date[1],units="mins"))
test2$date_s <- as.numeric(difftime(test2$date,test2$date[1],units="secs"))
# GGPLOT Configuration
plot0 = test2 %>%
ggplot(aes(x=total_deceased, y=total_confirmed)) +
geom_point(alpha = 0.7, stroke = 0.0) +
theme_fivethirtyeight() +
labs(title = "Infection vs Death",
x = "Total Infection",
y = "Total Deaths",
color = "",
caption = "Source: Google Open Data") +
theme(axis.title = element_text(),
text = element_text(family = "Rubik"),
legend.text=element_text(size=10)) +
scale_color_brewer(palette = "Set2")+
stat_summary(fun.data= mean_cl_normal) +
geom_smooth(color='red',method='lm')
sink("test2_linear_regression_result.txt")
summary(lm(test2,formula=total_deceased ~ total_confirmed))
sink()
#Save the plot image
ggsave("Infection_vs Death_ScatterPlot.png")
