/**
 */
package se.lnu.joa.covid.model.analysis.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import se.lnu.joa.covid.model.analysis.util.AnalysisAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class AnalysisItemProviderAdapterFactory extends AnalysisAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AnalysisItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link se.lnu.joa.covid.model.analysis.AnalyticModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnalyticModelItemProvider analyticModelItemProvider;

	/**
	 * This creates an adapter for a {@link se.lnu.joa.covid.model.analysis.AnalyticModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnalyticModelAdapter() {
		if (analyticModelItemProvider == null) {
			analyticModelItemProvider = new AnalyticModelItemProvider(this);
		}

		return analyticModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link se.lnu.joa.covid.model.analysis.Visualization} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VisualizationItemProvider visualizationItemProvider;

	/**
	 * This creates an adapter for a {@link se.lnu.joa.covid.model.analysis.Visualization}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVisualizationAdapter() {
		if (visualizationItemProvider == null) {
			visualizationItemProvider = new VisualizationItemProvider(this);
		}

		return visualizationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link se.lnu.joa.covid.model.analysis.Regression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RegressionItemProvider regressionItemProvider;

	/**
	 * This creates an adapter for a {@link se.lnu.joa.covid.model.analysis.Regression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRegressionAdapter() {
		if (regressionItemProvider == null) {
			regressionItemProvider = new RegressionItemProvider(this);
		}

		return regressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link se.lnu.joa.covid.model.analysis.LinnearRegression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinnearRegressionItemProvider linnearRegressionItemProvider;

	/**
	 * This creates an adapter for a {@link se.lnu.joa.covid.model.analysis.LinnearRegression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinnearRegressionAdapter() {
		if (linnearRegressionItemProvider == null) {
			linnearRegressionItemProvider = new LinnearRegressionItemProvider(this);
		}

		return linnearRegressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link se.lnu.joa.covid.model.analysis.LogarithmicRegression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LogarithmicRegressionItemProvider logarithmicRegressionItemProvider;

	/**
	 * This creates an adapter for a {@link se.lnu.joa.covid.model.analysis.LogarithmicRegression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogarithmicRegressionAdapter() {
		if (logarithmicRegressionItemProvider == null) {
			logarithmicRegressionItemProvider = new LogarithmicRegressionItemProvider(this);
		}

		return logarithmicRegressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link se.lnu.joa.covid.model.analysis.LinearPlot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinearPlotItemProvider linearPlotItemProvider;

	/**
	 * This creates an adapter for a {@link se.lnu.joa.covid.model.analysis.LinearPlot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinearPlotAdapter() {
		if (linearPlotItemProvider == null) {
			linearPlotItemProvider = new LinearPlotItemProvider(this);
		}

		return linearPlotItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link se.lnu.joa.covid.model.analysis.ScatterPlot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScatterPlotItemProvider scatterPlotItemProvider;

	/**
	 * This creates an adapter for a {@link se.lnu.joa.covid.model.analysis.ScatterPlot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScatterPlotAdapter() {
		if (scatterPlotItemProvider == null) {
			scatterPlotItemProvider = new ScatterPlotItemProvider(this);
		}

		return scatterPlotItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link se.lnu.joa.covid.model.analysis.Animation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnimationItemProvider animationItemProvider;

	/**
	 * This creates an adapter for a {@link se.lnu.joa.covid.model.analysis.Animation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnimationAdapter() {
		if (animationItemProvider == null) {
			animationItemProvider = new AnimationItemProvider(this);
		}

		return animationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link se.lnu.joa.covid.model.analysis.Log10Scale} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Log10ScaleItemProvider log10ScaleItemProvider;

	/**
	 * This creates an adapter for a {@link se.lnu.joa.covid.model.analysis.Log10Scale}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLog10ScaleAdapter() {
		if (log10ScaleItemProvider == null) {
			log10ScaleItemProvider = new Log10ScaleItemProvider(this);
		}

		return log10ScaleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link se.lnu.joa.covid.model.analysis.SqrtScale} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SqrtScaleItemProvider sqrtScaleItemProvider;

	/**
	 * This creates an adapter for a {@link se.lnu.joa.covid.model.analysis.SqrtScale}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSqrtScaleAdapter() {
		if (sqrtScaleItemProvider == null) {
			sqrtScaleItemProvider = new SqrtScaleItemProvider(this);
		}

		return sqrtScaleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link se.lnu.joa.covid.model.analysis.DateScale} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DateScaleItemProvider dateScaleItemProvider;

	/**
	 * This creates an adapter for a {@link se.lnu.joa.covid.model.analysis.DateScale}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDateScaleAdapter() {
		if (dateScaleItemProvider == null) {
			dateScaleItemProvider = new DateScaleItemProvider(this);
		}

		return dateScaleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link se.lnu.joa.covid.model.analysis.Scale} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScaleItemProvider scaleItemProvider;

	/**
	 * This creates an adapter for a {@link se.lnu.joa.covid.model.analysis.Scale}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScaleAdapter() {
		if (scaleItemProvider == null) {
			scaleItemProvider = new ScaleItemProvider(this);
		}

		return scaleItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (analyticModelItemProvider != null) analyticModelItemProvider.dispose();
		if (visualizationItemProvider != null) visualizationItemProvider.dispose();
		if (regressionItemProvider != null) regressionItemProvider.dispose();
		if (linnearRegressionItemProvider != null) linnearRegressionItemProvider.dispose();
		if (logarithmicRegressionItemProvider != null) logarithmicRegressionItemProvider.dispose();
		if (linearPlotItemProvider != null) linearPlotItemProvider.dispose();
		if (scatterPlotItemProvider != null) scatterPlotItemProvider.dispose();
		if (animationItemProvider != null) animationItemProvider.dispose();
		if (log10ScaleItemProvider != null) log10ScaleItemProvider.dispose();
		if (sqrtScaleItemProvider != null) sqrtScaleItemProvider.dispose();
		if (dateScaleItemProvider != null) dateScaleItemProvider.dispose();
		if (scaleItemProvider != null) scaleItemProvider.dispose();
	}

}
