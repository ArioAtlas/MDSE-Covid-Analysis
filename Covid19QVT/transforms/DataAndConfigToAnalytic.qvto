modeltype DATA "strict" uses 'http://lnu.se/dv651/covid19/csv';
modeltype CONFIG "strict" uses 'http://lnu.se/dv651/covid19/config';
modeltype ANALYSIS "strict" uses 'http://lnu.se/dv651/covid19/analysis';

	

transformation DataAndConfigToAnalytic(in dataModel : DATA, in configModel : CONFIG, out analysisModel : ANALYSIS);


main() {
	log("M2M Transformation has been started!");
	
	configModel.rootObjects()[Config] -> map ConfigToAnalysis(dataModel.GetDataPool());

}

query DATA::GetDataPool() : DataPool {	
	self.rootObjects()[DataPool]->forOne(dp){
		return dp;
	};
	
	return null;
}

query DataPool::RetriveDataColumn(columnName:String) : List(String) {
	self.sources->forEach(src){
		src.data->forEach(ds){
			if(ds.title = columnName){
				if(ds.metaClassName() = "IntSet"){ 
					return ds.oclAsType(IntSet).ConvertToStringList();
				};
				if(ds.metaClassName() = "DoubleSet"){ 
					return ds.oclAsType(DoubleSet).ConvertToStringList();
				};
				if(ds.metaClassName() = "DateSet"){ 
					return ds.oclAsType(DateSet).ConvertToStringList();
				};
				if(ds.metaClassName() = "StringSet"){ 
					return ds.oclAsType(StringSet).values->asList();
				};
			}
		}
	};
	
	return null;
}

query DataPool::RetriveDataColumnType(columnName:String) : String {	
	self.sources->forEach(src){
		src.data->forEach(ds){
			if(ds.title = columnName){
				if(ds.metaClassName() = "IntSet"){ 
					return "int";
				};
				if(ds.metaClassName() = "DoubleSet"){ 
					return "double";
				};
				if(ds.metaClassName() = "DateSet"){ 
					return "date";
				};
				if(ds.metaClassName() = "StringSet"){ 
					return "string";
				};
			}
		}
	};
	
	return null;
}

query DATA::IntSet::ConvertToStringList() : List(String) {
	var list:List(String);
	
	self.values->forEach(v){
		list += v.toString();
	};
	
	return list;
}

query DATA::DoubleSet::ConvertToStringList() : List(String) {
	var list:List(String);
	
	self.values->forEach(v){
		list += v.toString();
	};
	
	return list;
}

query DATA::DateSet::ConvertToStringList() : List(String) {
	var list:List(String);
	
	self.values->forEach(v){
		list += v.toString();
	};
	
	return list;
}


//
// Config Model To Analysis Model Transformations
//
mapping Config::ConfigToAnalysis(data:DataPool) : AnalyticModel {
	log("\n1.Transforming Data to Analysis");
	
	result.dataSource := self.source.map DataModel2DataSource(data);
	
	log("\n2.Transforming Config to Analysis");
		
	switch {
			case (self.visualization.type = CONFIG::VisualizationType::LinearPlot) result.visualization := self.visualization.map Visualization2LinearPlot();
			case (self.visualization.type = CONFIG::VisualizationType::ScatterPlot) result.visualization := self.visualization.map Visualization2ScatterPlot();
			else result.visualization := self.visualization.map Visualization2Visualization();
		};
		
	switch {
		case (self.regression.type = CONFIG::RegressionType::Linnear) result.regression := self.regression.map Regression2LinnearRegression();
		case (self.regression.type = CONFIG::RegressionType::Logarithmic) result.regression := self.regression.map Regression2LogarithmicRegression();
		else result.regression := self.regression.map Regression2Regression();
	};
			
}

mapping DataModel::DataModel2DataSource(data:DataPool) : ANALYSIS::DataSource {
	log(" 1.1.Transforming DataModel to DataSource");
	
	result.name := self.datasetName;
	result.path := self.dataSource;
	
	self.columns->asList()->forEach(col){
		result.data += self.map ToDataColumn(data,col);
	};	
}

mapping DataModel::ToDataColumn(data:DataPool, col:String) : ANALYSIS::DataColumn {
	log("  -Transforming DataModel.Column to DataColumn for #"+col);
	result.header := col;
	result.type := data.RetriveDataColumnType(col);

	self.filters->forEach(f){
		if(f.key = col){
			result.filter := f.value;
			break;
		}
	};
	
	if(result.type = 'date'){
		result.format := self.dateFormat;
	};
	
	data.RetriveDataColumn(col)->forEach(q){
		result.values += q;
	};
}

mapping CONFIG::Visualization::Visualization2Visualization() : ANALYSIS::Visualization {
	log(" 2.1.Transforming Config:Visualization to Analysis:Visualization");

	result.xAxis := self.axes.x.column;
	result.yAxis := self.axes.y.column;
	result.color := self.axes.z.column;
	result.title := self.info.title;
	result.subTitle := self.info.subTitle;
	result.xAxisLabel := self.axes.x.label;
	result.yAxisLabel := self.axes.y.label;
	result.colorLabel := self.axes.z.label;
	result.caption := self.info.caption;
	
	switch {
		case(self.axes.x.scale.type = CONFIG::ScaleType::Log) result.scale_x := self.axes.x.scale.map Scale2Log10Scale();
		case(self.axes.x.scale.type = CONFIG::ScaleType::Sqrt) result.scale_x := self.axes.x.scale.map Scale2SqrtScale();
		case(self.axes.x.scale.type = CONFIG::ScaleType::Date) result.scale_x := self.axes.x.scale.map Scale2DateScale();
	};
	
	switch {
		case(self.axes.y.scale.type = CONFIG::ScaleType::Log) result.scale_y := self.axes.y.scale.map Scale2Log10Scale();
		case(self.axes.y.scale.type = CONFIG::ScaleType::Sqrt) result.scale_y := self.axes.y.scale.map Scale2SqrtScale();
		case(self.axes.y.scale.type = CONFIG::ScaleType::Date) result.scale_y := self.axes.y.scale.map Scale2DateScale();
	};
	
}

mapping CONFIG::Scale::Scale2Scale() : ANALYSIS::Scale {
	log("  -Transforming Config:Scale to Analysis:Scale");
	
}

mapping CONFIG::Scale::Scale2Log10Scale() : ANALYSIS::Log10Scale 
inherits CONFIG::Scale::Scale2Scale {
	log("  -Transforming Config:Scale to Analysis:Log10Scale");
	
}

mapping CONFIG::Scale::Scale2SqrtScale() : ANALYSIS::SqrtScale 
inherits CONFIG::Scale::Scale2Scale {
	log("  -Transforming Config:Scale to Analysis:SqrtScale");
	
}

mapping CONFIG::Scale::Scale2DateScale() : ANALYSIS::DateScale 
inherits CONFIG::Scale::Scale2Scale {
	log("  -Transforming Config:Scale to Analysis:DateScale");
	
	result.format := self.format;
	result.breaks := self.breaks;
}

mapping CONFIG::Visualization::Visualization2LinearPlot() : ANALYSIS::LinearPlot 
inherits CONFIG::Visualization::Visualization2Visualization {
	log("  -Transforming Visualization to LinearPlot");
	
	result.lineSize := 1.2;
	result.lineAlpha := 1.8;
	
	result.animation := self.container().oclAsType(CONFIG::Config).animation.map Animation2Animation();
	
}

mapping CONFIG::Visualization::Visualization2ScatterPlot() : ANALYSIS::ScatterPlot 
inherits CONFIG::Visualization::Visualization2Visualization {
		log("  -Transforming Visualization to ScatterPlot");
	
	result.alpha := 0.7;
	result.stroke := 0;
	result.size := self.size;
	
	result.animation := self.container().oclAsType(CONFIG::Config).animation.map Animation2Animation();

}


mapping CONFIG::Animation::Animation2Animation() : ANALYSIS::Animation {
	log("\n 2.2.Transforming Config:Animation to Analysis:Animation");

	result.label := self.label;
	result.transitionTime := self.transitionTime;
	result.width := self.width;
	result.height := self.height;
	result.duration := self.duration;
	result.outputName := self.outputName;
	result.outputPath := self.outputPath;
	result.shadowWake := 0.02;
	result.fps := 30;
	result.endPause := 60;
	result.resolution := 100;
}


mapping CONFIG::Regression::Regression2Regression() : ANALYSIS::Regression {
	log("\n 2.3.Transforming Config:Regression to Analysis:Regression");
	
	result.dependentValue := self.dependentValue;
	result.independentValue := self.independentValue;
}

mapping CONFIG::Regression::Regression2LinnearRegression() : ANALYSIS::LinnearRegression 
inherits CONFIG::Regression::Regression2Regression {
	log("  -Transforming Regression to LinnearRegression");

}

mapping CONFIG::Regression::Regression2LogarithmicRegression() : ANALYSIS::LogarithmicRegression 
inherits CONFIG::Regression::Regression2Regression {
	log("  -Transforming Regression to LogarithmicRegression");
	
}